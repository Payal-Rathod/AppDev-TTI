using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Xml;
using System.Data.SQLite;

// ============================================================================
// (c) Sandy Bultena 2018
// * Released under the GNU General Public License
// ============================================================================

namespace Budget
{
    // ====================================================================
    // CLASS: expenses
    //        - A collection of expense items,
    //        - Read / write to file
    //        - etc
    // ====================================================================

    /// <summary>
    /// Expenses class that is used to manage a list of Expense objects.
    /// </summary>
    public class Expenses
    {    
        private SQLiteConnection db;


        /// <summary>
        /// Constrcutor that connects to a database connection given.
        /// </summary>
        /// <param name="con">The database connection that will be used to perform queries.</param>
        public Expenses(SQLiteConnection con)
        {
            db = con;
        }


        // ====================================================================
        // Add expense
        // ====================================================================

        /// <summary>
        /// Adds a new Expense object in the list of Expense. The id number is generated by default.
        /// </summary>
        /// <param name="date">The date of the expense.</param>
        /// <param name="category">The category of the expense.</param>
        /// <param name="amount">The amount of the expense.</param>
        /// <param name="description">The description of the expense.</param>
        ///<example>
        /// The example shown below shows the usage of this method: 
        /// 
        /// <code>
        /// <![CDATA[
        /// Expenses e = new Expenses();
        /// 
        /// //Adds a new Expense object to the list of Expense.
        /// e.Add(1/10/2018 12:00:00 AM, 10, 10, "hat (on credit)");
        /// 
        /// //Loops through the list of Expense that was populated by the constructor and that had a expense added to it. 
        /// //Also outputs the description of each expense to the console.
        /// foreach (Expense expense in e.List()){
        ///     Console.WriteLine(enxpense.description);
        /// }
        /// 
        /// ]]>
        /// </code>
        /// </example>
        public void Add(DateTime date, int category, Double amount, String description)
        {
            try
            {


                int count  =  0;
                    var cmd = new SQLiteCommand(db);

                    cmd.CommandText = "Select Id, Date, Description, Amount, CategoryId from expenses";
                    var checkDB = cmd.ExecuteScalar();

                    if (checkDB != null)
                    {
                        cmd = new SQLiteCommand("Select MAX(Id) from expenses", db);
                        count = Convert.ToInt32(cmd.ExecuteScalar());
                    }

                    cmd.CommandText = "INSERT INTO expenses(Id, Date, Description, Amount, CategoryId) VALUES (@Id, @Date, @Description, @Amount, @CategoryId)";

                    cmd.Parameters.AddWithValue("@Id", count  +  1);
                    cmd.Parameters.AddWithValue("@Date", date);
                    cmd.Parameters.AddWithValue("@Description", description);
                    cmd.Parameters.AddWithValue("@Amount", amount);
                    cmd.Parameters.AddWithValue("@CategoryId", category);

                    cmd.Prepare();
                    cmd.ExecuteNonQuery();
            }catch(Exception e)
            {
                throw e;
            }

        }

        // ====================================================================
        // Delete expense
        // ====================================================================

        /// <summary>
        /// Deletes the Expense that matches the id given in the parameter.
        /// </summary>
        /// <param name="Id">The id number of the expense that needs to be deleted.</param>
        ///<example>
        /// The example shown below shows the usage of this method: 
        /// 
        /// <code>
        /// <![CDATA[
        /// Expenses e = new Expenses();
        /// 
        /// //Removes a Category object from the list of Category.
        /// e.Delete(1);
        /// 
        /// //Loops through the list of Expense that was populated by the constructor by default and that had a expense removed from it.
        /// //Also outputs the description of each expense to the console.
        /// foreach (Expense expense in e.List()){
        ///     Console.WriteLine(expense.description);
        /// }
        /// 
        /// ]]>
        /// </code>
        /// </example>
        public void Delete(int Id)
        {
            try
            {
                var cmd = new SQLiteCommand(db);
                cmd.CommandText = "Select Id from expenses where Id = @Id";
                cmd.Parameters.AddWithValue("@Id", Id);
                cmd.Prepare();
                cmd.ExecuteNonQuery();

                var checkDB = cmd.ExecuteScalar();

                if (checkDB != null)
                {
                    cmd = new SQLiteCommand(db);

                    cmd.CommandText = "DELETE FROM expenses WHERE Id = @Id";
                    cmd.Parameters.AddWithValue("@Id", Id);
                    cmd.Prepare();
                    cmd.ExecuteNonQuery();
                }
            }
            catch (Exception e)
            {

                throw e;
            }

        }

        // ====================================================================
        // Return list of expenses
        // Note:  make new copy of list, so user cannot modify what is part of
        //        this instance
        // ====================================================================

        /// <summary>
        /// Returns a list of Expenses that contains Expense objects.
        /// </summary>
        /// <returns>A list of Expense Objects.</returns>
        ///<example>
        /// The example shown below shows the usage of this method: 
        /// 
        /// <code>
        /// <![CDATA[
        /// Expenses e = new Expenses();
        /// 
        /// //Loops through the list of Expense that was populated by the constructor and outputs the description of each expense to the console.
        /// foreach (Expense expense in e.List()){
        ///     Console.WriteLine(expense.description);
        /// }
        /// 
        /// ]]>
        /// </code>
        /// </example>
        public List<Expense> List()
        {
            List<Expense> newList = new List<Expense>();
            var cmd = new SQLiteCommand(db);

            try
            {


                cmd.CommandText = "Select Id, Date, Description, Amount, CategoryId from expenses";
                var rdr = cmd.ExecuteReader();

                // loop
                while (rdr.Read())
                {
                    int id = rdr.GetInt32(0);
                    DateTime date = rdr.GetDateTime(1);
                    string descr = rdr.GetString(2);
                    double amount = rdr.GetDouble(3);
                    int categoryId = rdr.GetInt32(4);
                    newList.Add(new Expense(id, date, categoryId, amount, descr));
                }

                cmd.Dispose();

                newList.OrderBy(idSort => idSort.Id);
            }
            catch  (Exception e)
            {
                throw e;
            }

            return newList;
        }

        /// <summary>
        /// Updates an expense with a specific id by changing its date, description, amount and cateoryId as needed.
        /// </summary>
        /// <param name="id">The Id of the expense</param>
        /// <param name="date">The new date of the expense</param>
        /// <param name="desc">The new description of the expens</param>
        /// <param name="amount">The new amount of the expens</param>
        /// <param name="category">The new category of the expens</param>
        public void UpdateProperties(int id, DateTime date, string desc, double amount, int category)
        {
            var cmd = new SQLiteCommand(db);
            try
            {


                cmd.CommandText = "Select Id from expenses where Id = @Id";
                    cmd.Parameters.AddWithValue("@Id", id);
                    cmd.Prepare();
                    cmd.ExecuteNonQuery();

                    var checkDB = cmd.ExecuteScalar();

                    if (checkDB == null)
                    {
                        throw new Exception("Invalid id: id " + id + " does not exist");
                    }


                cmd.CommandText = "SELECT Id, Date, Description, Amount, CategoryId from expenses where Id = @Id";
                    cmd.Parameters.AddWithValue("@Id", id);
                    cmd.Prepare();
                    cmd.ExecuteNonQuery();

                    cmd.CommandText = "UPDATE expenses SET Date= @Date, Description = @Description, Amount = @Amount, CategoryId = @CategoryId WHERE Id = @Id";
                    cmd.Parameters.AddWithValue("@Description", desc);
                    cmd.Parameters.AddWithValue("@Date",  date);
                    cmd.Parameters.AddWithValue("@Amount", amount);
                    cmd.Parameters.AddWithValue("@CategoryId", category);
                    cmd.Prepare();
                    cmd.ExecuteNonQuery();

                    cmd.Dispose();
            }
            catch(Exception e)
            {
                throw e;
            }
        }

    }
}

